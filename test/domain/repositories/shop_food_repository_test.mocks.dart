// Mocks generated by Mockito 5.4.6 from annotations
// in offro_cibo/test/domain/repositories/shop_food_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;
import 'dart:typed_data' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:offro_cibo/data/data_sources/firebase_firestore_food_service.dart'
    as _i3;
import 'package:offro_cibo/data/data_sources/firebase_storage_service.dart'
    as _i5;
import 'package:offro_cibo/data/models/food_dto.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFoodDTO_0 extends _i1.SmartFake implements _i2.FoodDTO {
  _FakeFoodDTO_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseFirestoreFoodServiceApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestoreFoodServiceApi extends _i1.Mock
    implements _i3.FirebaseFirestoreFoodServiceApi {
  MockFirebaseFirestoreFoodServiceApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.FoodDTO> addFood(_i2.FoodDTO? newFood) => (super.noSuchMethod(
        Invocation.method(
          #addFood,
          [newFood],
        ),
        returnValue: _i4.Future<_i2.FoodDTO>.value(_FakeFoodDTO_0(
          this,
          Invocation.method(
            #addFood,
            [newFood],
          ),
        )),
      ) as _i4.Future<_i2.FoodDTO>);

  @override
  _i4.Future<bool> deleteFood(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteFood,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.FoodDTO> getFood(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getFood,
          [id],
        ),
        returnValue: _i4.Future<_i2.FoodDTO>.value(_FakeFoodDTO_0(
          this,
          Invocation.method(
            #getFood,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.FoodDTO>);

  @override
  _i4.Future<_i2.FoodDTO> updateFood(_i2.FoodDTO? food) => (super.noSuchMethod(
        Invocation.method(
          #updateFood,
          [food],
        ),
        returnValue: _i4.Future<_i2.FoodDTO>.value(_FakeFoodDTO_0(
          this,
          Invocation.method(
            #updateFood,
            [food],
          ),
        )),
      ) as _i4.Future<_i2.FoodDTO>);

  @override
  _i4.Future<List<_i2.FoodDTO>> searchFood({
    required String? queryText,
    required List<String>? categoryIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchFood,
          [],
          {
            #queryText: queryText,
            #categoryIds: categoryIds,
          },
        ),
        returnValue: _i4.Future<List<_i2.FoodDTO>>.value(<_i2.FoodDTO>[]),
      ) as _i4.Future<List<_i2.FoodDTO>>);

  @override
  _i4.Future<List<_i2.FoodDTO>> getFoodListByUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodListByUser,
          [userId],
        ),
        returnValue: _i4.Future<List<_i2.FoodDTO>>.value(<_i2.FoodDTO>[]),
      ) as _i4.Future<List<_i2.FoodDTO>>);
}

/// A class which mocks [FirebaseStorageServiceApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorageServiceApi extends _i1.Mock
    implements _i5.FirebaseStorageServiceApi {
  MockFirebaseStorageServiceApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> uploadImageFromFile({
    required _i6.File? file,
    required String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImageFromFile,
          [],
          {
            #file: file,
            #path: path,
          },
        ),
        returnValue: _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #uploadImageFromFile,
            [],
            {
              #file: file,
              #path: path,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> uploadImageFromBytes({
    required _i8.Uint8List? bytes,
    required String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImageFromBytes,
          [],
          {
            #bytes: bytes,
            #path: path,
          },
        ),
        returnValue: _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #uploadImageFromBytes,
            [],
            {
              #bytes: bytes,
              #path: path,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> fetchImageUrl(String? path) => (super.noSuchMethod(
        Invocation.method(
          #fetchImageUrl,
          [path],
        ),
        returnValue: _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #fetchImageUrl,
            [path],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<bool> deleteImage(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteImage,
          [path],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
