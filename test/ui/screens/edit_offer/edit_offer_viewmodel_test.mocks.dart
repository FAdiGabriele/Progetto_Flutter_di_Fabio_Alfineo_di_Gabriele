// Mocks generated by Mockito 5.4.6 from annotations
// in offro_cibo/test/ui/screens/edit_offer/edit_offer_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:offro_cibo/domain/entities/food.dart' as _i5;
import 'package:offro_cibo/domain/providers/user_provider.dart' as _i8;
import 'package:offro_cibo/domain/repositories/shop_food_repository.dart'
    as _i2;
import 'package:offro_cibo/domain/utils/request_status.dart' as _i4;
import 'package:offro_cibo/ui/screens/edit_offer/utils/image_picker_notifier.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ShopFoodRepositoryApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopFoodRepositoryApi extends _i1.Mock
    implements _i2.ShopFoodRepositoryApi {
  MockShopFoodRepositoryApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.RequestStatus> addFood(
    _i5.Food? newFood,
    _i6.ImageSelectedWrapper? imageSelected,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFood,
          [
            newFood,
            imageSelected,
          ],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i7.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #addFood,
            [
              newFood,
              imageSelected,
            ],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);

  @override
  _i3.Future<_i4.RequestStatus> deleteFood(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteFood,
          [id],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i7.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #deleteFood,
            [id],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);

  @override
  _i3.Future<_i4.RequestStatus> getFood(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getFood,
          [id],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i7.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #getFood,
            [id],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);

  @override
  _i3.Future<_i4.RequestStatus> updateFood(
    _i5.Food? food,
    _i6.ImageSelectedWrapper? imageSelected,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFood,
          [
            food,
            imageSelected,
          ],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i7.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #updateFood,
            [
              food,
              imageSelected,
            ],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);

  @override
  _i3.Future<_i4.RequestStatus> getFoodListByUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodListByUser,
          [userId],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i7.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #getFoodListByUser,
            [userId],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);
}

/// A class which mocks [UserProviderApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProviderApi extends _i1.Mock implements _i8.UserProviderApi {
  MockUserProviderApi() {
    _i1.throwOnMissingStub(this);
  }
}
