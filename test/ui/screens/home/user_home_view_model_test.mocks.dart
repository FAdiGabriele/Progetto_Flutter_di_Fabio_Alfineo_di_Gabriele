// Mocks generated by Mockito 5.4.6 from annotations
// in offro_cibo/test/ui/screens/home/user_home_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:offro_cibo/domain/entities/categories.dart' as _i7;
import 'package:offro_cibo/domain/providers/user_provider.dart' as _i8;
import 'package:offro_cibo/domain/repositories/auth_repository.dart' as _i2;
import 'package:offro_cibo/domain/repositories/user_food_repository.dart'
    as _i6;
import 'package:offro_cibo/domain/utils/request_status.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthRepositoryApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepositoryApi extends _i1.Mock implements _i2.AuthRepositoryApi {
  MockAuthRepositoryApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.RequestStatus> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i5.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);

  @override
  _i3.Future<_i4.RequestStatus> register(
    String? email,
    String? password,
    String? username,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            username,
          ],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i5.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
              username,
            ],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);

  @override
  _i3.Future<_i4.RequestStatus> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i5.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);

  @override
  _i3.Future<_i4.RequestStatus> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [email],
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i5.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #sendPasswordResetEmail,
            [email],
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);
}

/// A class which mocks [UserFoodRepositoryApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserFoodRepositoryApi extends _i1.Mock
    implements _i6.UserFoodRepositoryApi {
  MockUserFoodRepositoryApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.RequestStatus> getFoodCounter({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodCounter,
          [],
          {#userId: userId},
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i5.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #getFoodCounter,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);

  @override
  _i3.Future<_i4.RequestStatus> searchFood({
    required String? queryText,
    required List<_i7.Categories>? categories,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchFood,
          [],
          {
            #queryText: queryText,
            #categories: categories,
          },
        ),
        returnValue: _i3.Future<_i4.RequestStatus>.value(
            _i5.dummyValue<_i4.RequestStatus>(
          this,
          Invocation.method(
            #searchFood,
            [],
            {
              #queryText: queryText,
              #categories: categories,
            },
          ),
        )),
      ) as _i3.Future<_i4.RequestStatus>);
}

/// A class which mocks [UserProviderApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProviderApi extends _i1.Mock implements _i8.UserProviderApi {
  MockUserProviderApi() {
    _i1.throwOnMissingStub(this);
  }
}
